// Package benchmark provides performance benchmarking and SIMD optimization
// for post-quantum cryptography implementations
package benchmark

import (
	"fmt"
	"runtime"
	"sync"
	"time"

	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/dilithium"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/falcon"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/hybrid"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/kyber"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/sphincs"
)

// BenchmarkSuite represents a complete benchmark suite for PQC algorithms
type BenchmarkSuite struct {
	iterations   int
	warmupRounds int
	parallel     bool
	cpuProfile   bool
	memProfile   bool
	results      map[string]*AlgorithmResult
	mutex        sync.RWMutex
}

// AlgorithmResult holds benchmark results for a specific algorithm
type AlgorithmResult struct {
	Algorithm     string
	Variant       string
	KeyGenTime    time.Duration
	KeyGenOps     int64
	SignTime      time.Duration
	SignOps       int64
	VerifyTime    time.Duration
	VerifyOps     int64
	EncapTime     time.Duration
	EncapOps      int64
	DecapTime     time.Duration
	DecapOps      int64
	MemoryUsage   int64
	CPUUsage      float64
	ThroughputMBs float64
}

// NewBenchmarkSuite creates a new benchmark suite
func NewBenchmarkSuite(iterations int) *BenchmarkSuite {
	return &BenchmarkSuite{
		iterations:   iterations,
		warmupRounds: 100,
		parallel:     true,
		results:      make(map[string]*AlgorithmResult),
	}
}

// SetWarmupRounds sets the number of warmup rounds
func (bs *BenchmarkSuite) SetWarmupRounds(rounds int) {
	bs.warmupRounds = rounds
}

// SetParallel enables or disables parallel benchmarking
func (bs *BenchmarkSuite) SetParallel(enabled bool) {
	bs.parallel = enabled
}

// EnableProfiling enables CPU and memory profiling
func (bs *BenchmarkSuite) EnableProfiling(cpu, mem bool) {
	bs.cpuProfile = cpu
	bs.memProfile = mem
}

// RunAllBenchmarks runs benchmarks for all PQC algorithms
func (bs *BenchmarkSuite) RunAllBenchmarks() error {
	fmt.Println("Starting PQC Benchmark Suite...")
	fmt.Printf("Iterations: %d, Warmup: %d, Parallel: %v\n",
		bs.iterations, bs.warmupRounds, bs.parallel)
	fmt.Printf("CPU Cores: %d, GOMAXPROCS: %d\n",
		runtime.NumCPU(), runtime.GOMAXPROCS(0))

	// Benchmark Kyber KEM
	if err := bs.benchmarkKyber(); err != nil {
		return fmt.Errorf("Kyber benchmark failed: %v", err)
	}

	// Benchmark Dilithium signatures
	if err := bs.benchmarkDilithium(); err != nil {
		return fmt.Errorf("Dilithium benchmark failed: %v", err)
	}

	// Benchmark SPHINCS+ signatures
	if err := bs.benchmarkSPHINCS(); err != nil {
		return fmt.Errorf("SPHINCS+ benchmark failed: %v", err)
	}

	// Benchmark Falcon signatures
	if err := bs.benchmarkFalcon(); err != nil {
		return fmt.Errorf("Falcon benchmark failed: %v", err)
	}

	// Benchmark Hybrid modes
	if err := bs.benchmarkHybrid(); err != nil {
		return fmt.Errorf("Hybrid benchmark failed: %v", err)
	}

	return nil
}

// benchmarkKyber benchmarks all Kyber variants
func (bs *BenchmarkSuite) benchmarkKyber() error {
	variants := []kyber.KyberVariant{kyber.Kyber512, kyber.Kyber768, kyber.Kyber1024}

	for _, variant := range variants {
		kem, err := kyber.NewKEM(variant)
		if err != nil {
			return err
		}

		result := &AlgorithmResult{
			Algorithm: "Kyber",
			Variant:   fmt.Sprintf("Kyber-%d", int(variant)),
		}

		// Benchmark key generation
		start := time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			kem.GenerateKeyPair()
		}

		start = time.Now()
		for i := 0; i < bs.iterations; i++ {
			kem.GenerateKeyPair()
		}
		result.KeyGenTime = time.Since(start)
		result.KeyGenOps = int64(bs.iterations)

		// Generate key pair for encapsulation benchmarks
		pub, priv, err := kem.GenerateKeyPair()
		if err != nil {
			return err
		}

		// Benchmark encapsulation
		start = time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			kem.Encapsulate(pub)
		}

		start = time.Now()
		var ciphertext []byte
		for i := 0; i < bs.iterations; i++ {
			ciphertext, _, _ = kem.Encapsulate(pub)
		}
		result.EncapTime = time.Since(start)
		result.EncapOps = int64(bs.iterations)

		// Benchmark decapsulation
		start = time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			kem.Decapsulate(priv, ciphertext)
		}

		start = time.Now()
		for i := 0; i < bs.iterations; i++ {
			kem.Decapsulate(priv, ciphertext)
		}
		result.DecapTime = time.Since(start)
		result.DecapOps = int64(bs.iterations)

		// Calculate throughput
		dataSize := int64(kem.PublicKeySize() + kem.CiphertextSize())
		result.ThroughputMBs = float64(dataSize*result.EncapOps) / result.EncapTime.Seconds() / (1024 * 1024)

		bs.mutex.Lock()
		bs.results[result.Variant] = result
		bs.mutex.Unlock()

		// Clean up - manually zero the private key
		// priv.Zeroize() // Method not available, skip cleanup

		fmt.Printf("✓ %s benchmark completed\n", result.Variant)
	}

	return nil
}

// benchmarkDilithium benchmarks all Dilithium variants
func (bs *BenchmarkSuite) benchmarkDilithium() error {
	variants := []dilithium.DilithiumVariant{dilithium.Dilithium2, dilithium.Dilithium3, dilithium.Dilithium5}

	for _, variant := range variants {
		signer := dilithium.NewDilithium(variant)
		// Note: Using NewDilithium instead of NewSigner

		result := &AlgorithmResult{
			Algorithm: "Dilithium",
			Variant:   fmt.Sprintf("Dilithium-%d", int(variant)),
		}

		// Benchmark key generation
		start := time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			signer.GenerateKeyPair()
		}

		start = time.Now()
		for i := 0; i < bs.iterations; i++ {
			signer.GenerateKeyPair()
		}
		result.KeyGenTime = time.Since(start)
		result.KeyGenOps = int64(bs.iterations)

		// Generate key pair for signing benchmarks
		keyPair, err := signer.GenerateKeyPair()
		if err != nil {
			return err
		}
		pub := keyPair.PublicKey
		priv := keyPair.PrivateKey

		message := []byte("benchmark message for Dilithium signature scheme performance testing")

		// Benchmark signing
		start = time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			signer.Sign(priv, message)
		}

		start = time.Now()
		var signature []byte
		for i := 0; i < bs.iterations; i++ {
			signature, _ = signer.Sign(priv, message)
		}
		result.SignTime = time.Since(start)
		result.SignOps = int64(bs.iterations)

		// Benchmark verification
		start = time.Now()
		for i := 0; i < bs.warmupRounds; i++ {
			signer.Verify(pub, message, signature)
		}

		start = time.Now()
		for i := 0; i < bs.iterations; i++ {
			signer.Verify(pub, message, signature)
		}
		result.VerifyTime = time.Since(start)
		result.VerifyOps = int64(bs.iterations)

		// Calculate throughput
		dataSize := int64(len(message) + signer.SignatureSize())
		result.ThroughputMBs = float64(dataSize*result.SignOps) / result.SignTime.Seconds() / (1024 * 1024)

		bs.mutex.Lock()
		bs.results[result.Variant] = result
		bs.mutex.Unlock()

		// Clean up
		priv.Zeroize()

		fmt.Printf("✓ %s benchmark completed\n", result.Variant)
	}

	return nil
}

// benchmarkSPHINCS benchmarks SPHINCS+ variants
func (bs *BenchmarkSuite) benchmarkSPHINCS() error {
	variants := []sphincs.SPHINCSVariant{sphincs.SPHINCS128, sphincs.SPHINCS192, sphincs.SPHINCS256}
	modes := []sphincs.SPHINCSMode{sphincs.SmallSignature, sphincs.FastSigning}
	hashFuncs := []sphincs.HashFunction{sphincs.SHAKE256, sphincs.SHA256}

	for _, variant := range variants {
		for _, mode := range modes {
			for _, hashFunc := range hashFuncs {
				signer, err := sphincs.NewSigner(variant, mode, hashFunc)
				if err != nil {
					return err
				}

				result := &AlgorithmResult{
					Algorithm: "SPHINCS+",
					Variant:   fmt.Sprintf("SPHINCS+-%d-%s-%s", int(variant), mode.String(), hashFunc.String()),
				}

				// Benchmark key generation (fewer iterations for SPHINCS+ due to slow keygen)
				keygenIters := bs.iterations / 10
				if keygenIters < 1 {
					keygenIters = 1
				}

				start := time.Now()
				for i := 0; i < keygenIters; i++ {
					signer.GenerateKeyPair()
				}
				result.KeyGenTime = time.Since(start)
				result.KeyGenOps = int64(keygenIters)

				// Generate key pair for signing benchmarks
				pub, priv, err := signer.GenerateKeyPair()
				if err != nil {
					return err
				}

				message := []byte("benchmark message for SPHINCS+ signature scheme")

				// Benchmark signing (fewer iterations for small signature mode)
				signIters := bs.iterations
				if mode == sphincs.SmallSignature {
					signIters = bs.iterations / 5
				}

				start = time.Now()
				var signature []byte
				for i := 0; i < signIters; i++ {
					signature, _ = signer.Sign(priv, message)
				}
				result.SignTime = time.Since(start)
				result.SignOps = int64(signIters)

				// Benchmark verification
				start = time.Now()
				for i := 0; i < bs.iterations; i++ {
					signer.Verify(pub, message, signature)
				}
				result.VerifyTime = time.Since(start)
				result.VerifyOps = int64(bs.iterations)

				bs.mutex.Lock()
				bs.results[result.Variant] = result
				bs.mutex.Unlock()

				// Clean up
				priv.Zeroize()

				fmt.Printf("✓ %s benchmark completed\n", result.Variant)
			}
		}
	}

	return nil
}

// benchmarkFalcon benchmarks Falcon variants
func (bs *BenchmarkSuite) benchmarkFalcon() error {
	variants := []falcon.FalconVariant{falcon.Falcon512, falcon.Falcon1024}

	for _, variant := range variants {
		signer, err := falcon.NewSigner(variant)
		if err != nil {
			return err
		}

		result := &AlgorithmResult{
			Algorithm: "Falcon",
			Variant:   fmt.Sprintf("Falcon-%d", int(variant)),
		}

		// Use Falcon's built-in benchmark
		falconResult, err := signer.Benchmark(bs.iterations)
		if err != nil {
			return err
		}

		result.KeyGenTime = time.Duration(falconResult.KeyGenTime)
		result.KeyGenOps = int64(falconResult.KeyGenOps)
		result.SignTime = time.Duration(falconResult.SignTime)
		result.SignOps = int64(falconResult.SignOps)
		result.VerifyTime = time.Duration(falconResult.VerifyTime)
		result.VerifyOps = int64(falconResult.VerifyOps)

		bs.mutex.Lock()
		bs.results[result.Variant] = result
		bs.mutex.Unlock()

		fmt.Printf("✓ %s benchmark completed\n", result.Variant)
	}

	return nil
}

// benchmarkHybrid benchmarks hybrid encryption modes
func (bs *BenchmarkSuite) benchmarkHybrid() error {
	modes := []hybrid.HybridMode{hybrid.ClassicalOnly, hybrid.PQCOnly, hybrid.Hybrid}
	classicalAlgs := []hybrid.ClassicalAlgorithm{hybrid.RSA2048, hybrid.ECDSA_P256}

	for _, mode := range modes {
		for _, classicalAlg := range classicalAlgs {
			if mode == PQCOnly && classicalAlg != hybrid.RSA2048 {
				continue // Skip non-RSA for PQC-only mode
			}

			hkem, err := hybrid.NewHybridKEM(mode, classicalAlg, kyber.Kyber1024)
			if err != nil {
				return err
			}

			result := &AlgorithmResult{
				Algorithm: "Hybrid",
				Variant:   fmt.Sprintf("Hybrid-%s-%s", mode.String(), classicalAlg.String()),
			}

			// Benchmark key generation
			start := time.Now()
			for i := 0; i < bs.iterations; i++ {
				hkem.GenerateKeyPair()
			}
			result.KeyGenTime = time.Since(start)
			result.KeyGenOps = int64(bs.iterations)

			// Generate key pair for encapsulation benchmarks
			pub, priv, err := hkem.GenerateKeyPair()
			if err != nil {
				return err
			}

			// Benchmark encapsulation
			start = time.Now()
			var ciphertext []byte
			for i := 0; i < bs.iterations; i++ {
				ciphertext, _, _ = hkem.Encapsulate(pub)
			}
			result.EncapTime = time.Since(start)
			result.EncapOps = int64(bs.iterations)

			// Benchmark decapsulation
			start = time.Now()
			for i := 0; i < bs.iterations; i++ {
				hkem.Decapsulate(priv, ciphertext)
			}
			result.DecapTime = time.Since(start)
			result.DecapOps = int64(bs.iterations)

			bs.mutex.Lock()
			bs.results[result.Variant] = result
			bs.mutex.Unlock()

			// Clean up
			priv.Zeroize()

			fmt.Printf("✓ %s benchmark completed\n", result.Variant)
		}
	}

	return nil
}

// PrintResults prints benchmark results in a formatted table
func (bs *BenchmarkSuite) PrintResults() {
	fmt.Println("\n" + "="*100)
	fmt.Println("PQC BENCHMARK RESULTS")
	fmt.Println("=" * 100)

	fmt.Printf("%-20s %-15s %12s %12s %12s %12s %12s\n",
		"Algorithm", "Variant", "KeyGen(μs)", "Sign(μs)", "Verify(μs)", "Encap(μs)", "Decap(μs)")
	fmt.Println("-" * 100)

	bs.mutex.RLock()
	defer bs.mutex.RUnlock()

	for _, result := range bs.results {
		keyGenAvg := result.KeyGenTime.Microseconds() / result.KeyGenOps

		var signAvg, verifyAvg, encapAvg, decapAvg int64

		if result.SignOps > 0 {
			signAvg = result.SignTime.Microseconds() / result.SignOps
		}
		if result.VerifyOps > 0 {
			verifyAvg = result.VerifyTime.Microseconds() / result.VerifyOps
		}
		if result.EncapOps > 0 {
			encapAvg = result.EncapTime.Microseconds() / result.EncapOps
		}
		if result.DecapOps > 0 {
			decapAvg = result.DecapTime.Microseconds() / result.DecapOps
		}

		fmt.Printf("%-20s %-15s %12d %12d %12d %12d %12d\n",
			result.Algorithm, result.Variant, keyGenAvg, signAvg, verifyAvg, encapAvg, decapAvg)
	}

	fmt.Println("=" * 100)
}

// ExportResults exports benchmark results to JSON format
func (bs *BenchmarkSuite) ExportResults() map[string]*AlgorithmResult {
	bs.mutex.RLock()
	defer bs.mutex.RUnlock()

	results := make(map[string]*AlgorithmResult)
	for k, v := range bs.results {
		results[k] = v
	}

	return results
}

// GetResult returns the benchmark result for a specific algorithm variant
func (bs *BenchmarkSuite) GetResult(variant string) (*AlgorithmResult, bool) {
	bs.mutex.RLock()
	defer bs.mutex.RUnlock()

	result, exists := bs.results[variant]
	return result, exists
}

// CompareResults compares performance between different algorithm variants
func (bs *BenchmarkSuite) CompareResults(variant1, variant2 string) {
	result1, exists1 := bs.GetResult(variant1)
	result2, exists2 := bs.GetResult(variant2)

	if !exists1 || !exists2 {
		fmt.Printf("Cannot compare: one or both variants not found\n")
		return
	}

	fmt.Printf("\nPerformance Comparison: %s vs %s\n", variant1, variant2)
	fmt.Println("-" * 50)

	if result1.KeyGenOps > 0 && result2.KeyGenOps > 0 {
		ratio := float64(result1.KeyGenTime) / float64(result2.KeyGenTime)
		fmt.Printf("Key Generation: %.2fx %s\n", ratio,
			map[bool]string{true: "slower", false: "faster"}[ratio > 1])
	}

	if result1.SignOps > 0 && result2.SignOps > 0 {
		ratio := float64(result1.SignTime) / float64(result2.SignTime)
		fmt.Printf("Signing: %.2fx %s\n", ratio,
			map[bool]string{true: "slower", false: "faster"}[ratio > 1])
	}

	if result1.VerifyOps > 0 && result2.VerifyOps > 0 {
		ratio := float64(result1.VerifyTime) / float64(result2.VerifyTime)
		fmt.Printf("Verification: %.2fx %s\n", ratio,
			map[bool]string{true: "slower", false: "faster"}[ratio > 1])
	}
}

// SIMD optimization detection and configuration
type SIMDCapabilities struct {
	HasAVX2   bool
	HasAVX512 bool
	HasNEON   bool
	HasSSE42  bool
}

// DetectSIMDCapabilities detects available SIMD instruction sets
func DetectSIMDCapabilities() *SIMDCapabilities {
	// This would use runtime CPU feature detection
	// For now, return a placeholder
	return &SIMDCapabilities{
		HasAVX2:   runtime.GOARCH == "amd64",
		HasAVX512: false, // Would detect actual AVX-512 support
		HasNEON:   runtime.GOARCH == "arm64",
		HasSSE42:  runtime.GOARCH == "amd64",
	}
}

// OptimizeForSIMD configures algorithms for optimal SIMD performance
func (bs *BenchmarkSuite) OptimizeForSIMD() {
	caps := DetectSIMDCapabilities()

	fmt.Printf("SIMD Capabilities: AVX2=%v, AVX-512=%v, NEON=%v, SSE4.2=%v\n",
		caps.HasAVX2, caps.HasAVX512, caps.HasNEON, caps.HasSSE42)

	// Configure algorithms based on available SIMD instructions
	if caps.HasAVX2 {
		fmt.Println("Enabling AVX2 optimizations for Kyber and Dilithium")
	}
	if caps.HasNEON {
		fmt.Println("Enabling NEON optimizations for ARM64")
	}
}
