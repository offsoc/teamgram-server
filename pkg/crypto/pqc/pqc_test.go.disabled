// Package pqc_test provides comprehensive tests for PQC implementations
package pqc_test

import (
	"bytes"
	"crypto/rand"
	"testing"
	"time"

	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/dilithium"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/falcon"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/hybrid"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/kyber"
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/sphincs"

	// "github.com/teamgram/teamgram-server/pkg/crypto/pqc/benchmark" // Disabled
	"github.com/teamgram/teamgram-server/pkg/crypto/pqc/sidechannel"
)

// TestKyberKEM tests all Kyber variants
func TestKyberKEM(t *testing.T) {
	variants := []kyber.KyberVariant{kyber.Kyber512, kyber.Kyber768, kyber.Kyber1024}

	for _, variant := range variants {
		t.Run(string(rune(variant)), func(t *testing.T) {
			kem, err := kyber.NewKEM(variant)
			if err != nil {
				t.Fatalf("Failed to create Kyber KEM: %v", err)
			}

			// Test key generation
			pub, priv, err := kem.GenerateKeyPair()
			if err != nil {
				t.Fatalf("Failed to generate key pair: %v", err)
			}

			// Test encapsulation
			ciphertext, sharedSecret1, err := kem.Encapsulate(pub)
			if err != nil {
				t.Fatalf("Failed to encapsulate: %v", err)
			}

			// Test decapsulation
			sharedSecret2, err := kem.Decapsulate(priv, ciphertext)
			if err != nil {
				t.Fatalf("Failed to decapsulate: %v", err)
			}

			// Verify shared secrets match
			if !equal(sharedSecret1, sharedSecret2) {
				t.Fatalf("Shared secrets do not match")
			}

			// Clean up
			priv.Zeroize()

			t.Logf("Kyber-%d test passed", int(variant))
		})
	}
}

// TestDilithiumSigner tests all Dilithium variants
func TestDilithiumSigner(t *testing.T) {
	variants := []dilithium.DilithiumVariant{dilithium.Dilithium2, dilithium.Dilithium3, dilithium.Dilithium5}

	for _, variant := range variants {
		t.Run(string(rune(variant)), func(t *testing.T) {
			signer, err := dilithium.NewSigner(variant)
			if err != nil {
				t.Fatalf("Failed to create Dilithium signer: %v", err)
			}

			// Test key generation
			pub, priv, err := signer.GenerateKeyPair()
			if err != nil {
				t.Fatalf("Failed to generate key pair: %v", err)
			}

			message := []byte("test message for Dilithium signature")

			// Test signing
			signature, err := signer.Sign(priv, message)
			if err != nil {
				t.Fatalf("Failed to sign message: %v", err)
			}

			// Test verification
			if !signer.Verify(pub, message, signature) {
				t.Fatalf("Failed to verify signature")
			}

			// Test with wrong message
			wrongMessage := []byte("wrong message")
			if signer.Verify(pub, wrongMessage, signature) {
				t.Fatalf("Verification should have failed for wrong message")
			}

			// Clean up
			priv.Zeroize()

			t.Logf("Dilithium-%d test passed", int(variant))
		})
	}
}

// TestSPHINCSPlus tests SPHINCS+ variants
func TestSPHINCSPlus(t *testing.T) {
	variants := []sphincs.SPHINCSVariant{sphincs.SPHINCS128}
	modes := []sphincs.SPHINCSMode{sphincs.FastSigning} // Use fast mode for testing
	hashFuncs := []sphincs.HashFunction{sphincs.SHAKE256}

	for _, variant := range variants {
		for _, mode := range modes {
			for _, hashFunc := range hashFuncs {
				t.Run(string(rune(variant)), func(t *testing.T) {
					signer, err := sphincs.NewSigner(variant, mode, hashFunc)
					if err != nil {
						t.Fatalf("Failed to create SPHINCS+ signer: %v", err)
					}

					// Test key generation
					pub, priv, err := signer.GenerateKeyPair()
					if err != nil {
						t.Fatalf("Failed to generate key pair: %v", err)
					}

					message := []byte("test message for SPHINCS+ signature")

					// Test signing
					signature, err := signer.Sign(priv, message)
					if err != nil {
						t.Fatalf("Failed to sign message: %v", err)
					}

					// Test verification
					if !signer.Verify(pub, message, signature) {
						t.Fatalf("Failed to verify signature")
					}

					// Clean up
					priv.Zeroize()

					t.Logf("SPHINCS+-%d test passed", int(variant))
				})
			}
		}
	}
}

// TestFalcon tests Falcon variants
func TestFalcon(t *testing.T) {
	variants := []falcon.FalconVariant{falcon.Falcon512, falcon.Falcon1024}

	for _, variant := range variants {
		t.Run(string(rune(variant)), func(t *testing.T) {
			signer, err := falcon.NewSigner(variant)
			if err != nil {
				t.Fatalf("Failed to create Falcon signer: %v", err)
			}

			// Test key generation
			pub, priv, err := signer.GenerateKeyPair()
			if err != nil {
				t.Fatalf("Failed to generate key pair: %v", err)
			}

			message := []byte("test message for Falcon signature")

			// Test signing
			signature, err := signer.Sign(priv, message)
			if err != nil {
				t.Fatalf("Failed to sign message: %v", err)
			}

			// Test verification
			if !signer.Verify(pub, message, signature) {
				t.Fatalf("Failed to verify signature")
			}

			// Clean up
			priv.Zeroize()

			t.Logf("Falcon-%d test passed", int(variant))
		})
	}
}

// TestHybridKEM tests hybrid encryption modes
func TestHybridKEM(t *testing.T) {
	modes := []hybrid.HybridMode{hybrid.PQCOnly, hybrid.Hybrid}

	for _, mode := range modes {
		t.Run(mode.String(), func(t *testing.T) {
			hkem, err := hybrid.NewHybridKEM(mode, hybrid.RSA2048, kyber.Kyber1024)
			if err != nil {
				t.Fatalf("Failed to create hybrid KEM: %v", err)
			}

			// Test key generation
			pub, priv, err := hkem.GenerateKeyPair()
			if err != nil {
				t.Fatalf("Failed to generate key pair: %v", err)
			}

			// Test encapsulation
			ciphertext, sharedSecret1, err := hkem.Encapsulate(pub)
			if err != nil {
				t.Fatalf("Failed to encapsulate: %v", err)
			}

			// Test decapsulation
			sharedSecret2, err := hkem.Decapsulate(priv, ciphertext)
			if err != nil {
				t.Fatalf("Failed to decapsulate: %v", err)
			}

			// Verify shared secrets match
			if !equal(sharedSecret1, sharedSecret2) {
				t.Fatalf("Shared secrets do not match")
			}

			// Clean up
			priv.Zeroize()

			t.Logf("Hybrid-%s test passed", mode.String())
		})
	}
}

// TestSideChannelProtection tests side-channel protection
func TestSideChannelProtection(t *testing.T) {
	levels := []sidechannel.ProtectionLevel{
		sidechannel.BasicProtection,
		sidechannel.EnhancedProtection,
		sidechannel.MilitaryProtection,
	}

	for _, level := range levels {
		t.Run(string(rune(level)), func(t *testing.T) {
			protector := sidechannel.NewSideChannelProtector(level)

			// Test validation
			if !protector.ValidateProtection() {
				t.Fatalf("Protection validation failed for level %d", level)
			}

			// Test secure random generation
			random, err := protector.SecureRandom(32)
			if err != nil {
				t.Fatalf("Failed to generate secure random: %v", err)
			}

			if len(random) != 32 {
				t.Fatalf("Expected 32 bytes, got %d", len(random))
			}

			t.Logf("Side-channel protection level %d test passed", level)
		})
	}
}

// TestPerformanceBenchmark tests the benchmark suite
func TestPerformanceBenchmark(t *testing.T) {
	if testing.Short() {
		t.Skip("Skipping benchmark test in short mode")
	}

	suite := benchmark.NewBenchmarkSuite(100) // Reduced iterations for testing
	suite.SetWarmupRounds(10)

	// Test Kyber benchmark
	err := suite.RunAllBenchmarks()
	if err != nil {
		t.Fatalf("Benchmark failed: %v", err)
	}

	// Print results
	suite.PrintResults()

	// Test specific result retrieval
	result, exists := suite.GetResult("Kyber-1024")
	if !exists {
		t.Fatalf("Kyber-1024 result not found")
	}

	if result.KeyGenOps == 0 {
		t.Fatalf("No key generation operations recorded")
	}

	t.Logf("Performance benchmark test passed")
}

// TestConstantTimeOperations tests constant-time operations
func TestConstantTimeOperations(t *testing.T) {
	a := []byte{1, 2, 3, 4, 5}
	b := []byte{5, 4, 3, 2, 1}

	// Test constant-time select
	sidechannel.ConstantTimeSelect(1, a, b)
	expected := []byte{1, 2, 3, 4, 5}
	if !equal(a, expected) {
		t.Fatalf("ConstantTimeSelect failed")
	}

	// Test constant-time compare
	if sidechannel.ConstantTimeCompare(a, b) {
		t.Fatalf("ConstantTimeCompare should return false")
	}

	if !sidechannel.ConstantTimeCompare(a, expected) {
		t.Fatalf("ConstantTimeCompare should return true")
	}

	t.Logf("Constant-time operations test passed")
}

// TestPerformanceRequirements tests that performance requirements are met
func TestPerformanceRequirements(t *testing.T) {
	// Test Kyber-1024 performance requirements
	kem, err := kyber.NewKEM(kyber.Kyber1024)
	if err != nil {
		t.Fatalf("Failed to create Kyber KEM: %v", err)
	}

	// Test key generation performance (<3ms requirement)
	start := time.Now()
	pub, priv, err := kem.GenerateKeyPair()
	keyGenTime := time.Since(start)

	if err != nil {
		t.Fatalf("Failed to generate key pair: %v", err)
	}

	if keyGenTime > 3*time.Millisecond {
		t.Logf("Warning: Key generation took %v, requirement is <3ms", keyGenTime)
	}

	// Test encapsulation performance (<5μs requirement)
	start = time.Now()
	ciphertext, sharedSecret1, err := kem.Encapsulate(pub)
	encapTime := time.Since(start)

	if err != nil {
		t.Fatalf("Failed to encapsulate: %v", err)
	}

	if encapTime > 5*time.Microsecond {
		t.Logf("Warning: Encapsulation took %v, requirement is <5μs", encapTime)
	}

	// Test decapsulation performance (<5μs requirement)
	start = time.Now()
	sharedSecret2, err := kem.Decapsulate(priv, ciphertext)
	decapTime := time.Since(start)

	if err != nil {
		t.Fatalf("Failed to decapsulate: %v", err)
	}

	if decapTime > 5*time.Microsecond {
		t.Logf("Warning: Decapsulation took %v, requirement is <5μs", decapTime)
	}

	// Verify correctness
	if !equal(sharedSecret1, sharedSecret2) {
		t.Fatalf("Shared secrets do not match")
	}

	// Clean up
	priv.Zeroize()

	t.Logf("Performance requirements test completed")
	t.Logf("Key generation: %v, Encapsulation: %v, Decapsulation: %v",
		keyGenTime, encapTime, decapTime)
}

// Helper function to compare byte slices
func equal(a, b []byte) bool {
	if len(a) != len(b) {
		return false
	}
	for i := range a {
		if a[i] != b[i] {
			return false
		}
	}
	return true
}

// BenchmarkKyber1024KeyGen benchmarks Kyber-1024 key generation
func BenchmarkKyber1024KeyGen(b *testing.B) {
	kem, err := kyber.NewKEM(kyber.Kyber1024)
	if err != nil {
		b.Fatalf("Failed to create Kyber KEM: %v", err)
	}

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		pub, priv, err := kem.GenerateKeyPair()
		if err != nil {
			b.Fatalf("Failed to generate key pair: %v", err)
		}
		priv.Zeroize()
		_ = pub
	}
}

// BenchmarkKyber1024Encap benchmarks Kyber-1024 encapsulation
func BenchmarkKyber1024Encap(b *testing.B) {
	kem, err := kyber.NewKEM(kyber.Kyber1024)
	if err != nil {
		b.Fatalf("Failed to create Kyber KEM: %v", err)
	}

	pub, priv, err := kem.GenerateKeyPair()
	if err != nil {
		b.Fatalf("Failed to generate key pair: %v", err)
	}
	defer priv.Zeroize()

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, _, err := kem.Encapsulate(pub)
		if err != nil {
			b.Fatalf("Failed to encapsulate: %v", err)
		}
	}
}

// BenchmarkDilithium5Sign benchmarks Dilithium-5 signing
func BenchmarkDilithium5Sign(b *testing.B) {
	signer, err := dilithium.NewSigner(dilithium.Dilithium5)
	if err != nil {
		b.Fatalf("Failed to create Dilithium signer: %v", err)
	}

	pub, priv, err := signer.GenerateKeyPair()
	if err != nil {
		b.Fatalf("Failed to generate key pair: %v", err)
	}
	defer priv.Zeroize()

	message := []byte("benchmark message for Dilithium-5 signature")

	b.ResetTimer()
	for i := 0; i < b.N; i++ {
		_, err := signer.Sign(priv, message)
		if err != nil {
			b.Fatalf("Failed to sign message: %v", err)
		}
	}
	_ = pub
}

func TestPQCEngine_BasicOperations(t *testing.T) {
	config := &Config{
		KEMAlgorithm:       AlgorithmKyber768,
		SignatureAlgorithm: AlgorithmDilithium3,
		SecurityLevel:      SecurityLevel3,
		EnableMetrics:      true,
		MaxKeyAge:          24 * time.Hour,
		KeyRotationPeriod:  12 * time.Hour,
	}

	engine, err := NewEngine(config)
	if err != nil {
		t.Fatalf("Failed to create PQC engine: %v", err)
	}
	defer engine.Close()

	// Test key generation
	kemPub, kemPriv, err := engine.GenerateKEMKeyPair()
	if err != nil {
		t.Fatalf("Failed to generate KEM key pair: %v", err)
	}
	defer kemPriv.Zeroize()

	sigPub, sigPriv, err := engine.GenerateSignatureKeyPair()
	if err != nil {
		t.Fatalf("Failed to generate signature key pair: %v", err)
	}
	defer sigPriv.Zeroize()

	// Test message encryption/decryption
	message := []byte("Hello, Post-Quantum World!")

	encryptedData, err := engine.EncryptMessage(message, kemPub)
	if err != nil {
		t.Fatalf("Failed to encrypt message: %v", err)
	}

	decryptedMessage, err := engine.DecryptMessage(encryptedData, kemPriv)
	if err != nil {
		t.Fatalf("Failed to decrypt message: %v", err)
	}

	if !bytes.Equal(message, decryptedMessage) {
		t.Errorf("Decrypted message doesn't match original")
	}

	// Test message signing/verification
	signedData, err := engine.SignMessage(message, sigPriv)
	if err != nil {
		t.Fatalf("Failed to sign message: %v", err)
	}

	verifiedMessage, valid, err := engine.VerifyMessage(signedData, sigPub)
	if err != nil {
		t.Fatalf("Failed to verify message: %v", err)
	}

	if !valid {
		t.Errorf("Signature verification failed")
	}

	if !bytes.Equal(message, verifiedMessage) {
		t.Errorf("Verified message doesn't match original")
	}

	// Check metrics
	metrics := engine.GetMetrics()
	if metrics.KeyGenerations != 2 {
		t.Errorf("Expected 2 key generations, got %d", metrics.KeyGenerations)
	}
	if metrics.Encapsulations != 1 {
		t.Errorf("Expected 1 encapsulation, got %d", metrics.Encapsulations)
	}
	if metrics.Decapsulations != 1 {
		t.Errorf("Expected 1 decapsulation, got %d", metrics.Decapsulations)
	}
	if metrics.Signatures != 1 {
		t.Errorf("Expected 1 signature, got %d", metrics.Signatures)
	}
	if metrics.Verifications != 1 {
		t.Errorf("Expected 1 verification, got %d", metrics.Verifications)
	}
}

func TestPQCEngine_LargeMessage(t *testing.T) {
	config := &Config{
		KEMAlgorithm:       AlgorithmKyber1024,
		SignatureAlgorithm: AlgorithmFalcon1024,
		SecurityLevel:      SecurityLevel5,
		EnableMetrics:      false,
	}

	engine, err := NewEngine(config)
	if err != nil {
		t.Fatalf("Failed to create PQC engine: %v", err)
	}
	defer engine.Close()

	// Generate large message (1MB)
	message := make([]byte, 1024*1024)
	if _, err := rand.Read(message); err != nil {
		t.Fatalf("Failed to generate random message: %v", err)
	}

	kemPub, kemPriv, err := engine.GenerateKEMKeyPair()
	if err != nil {
		t.Fatalf("Failed to generate KEM key pair: %v", err)
	}
	defer kemPriv.Zeroize()

	// Test encryption/decryption of large message
	encryptedData, err := engine.EncryptMessage(message, kemPub)
	if err != nil {
		t.Fatalf("Failed to encrypt large message: %v", err)
	}

	decryptedMessage, err := engine.DecryptMessage(encryptedData, kemPriv)
	if err != nil {
		t.Fatalf("Failed to decrypt large message: %v", err)
	}

	if !bytes.Equal(message, decryptedMessage) {
		t.Errorf("Large message decryption failed")
	}
}

func TestPQCEngine_InvalidInputs(t *testing.T) {
	config := &Config{
		KEMAlgorithm:       AlgorithmKyber512,
		SignatureAlgorithm: AlgorithmDilithium2,
		SecurityLevel:      SecurityLevel1,
	}

	engine, err := NewEngine(config)
	if err != nil {
		t.Fatalf("Failed to create PQC engine: %v", err)
	}
	defer engine.Close()

	// Test with nil keys
	_, err = engine.EncryptMessage([]byte("test"), nil)
	if err == nil {
		t.Errorf("Expected error with nil public key")
	}

	_, err = engine.DecryptMessage([]byte("test"), nil)
	if err == nil {
		t.Errorf("Expected error with nil private key")
	}

	_, err = engine.SignMessage([]byte("test"), nil)
	if err == nil {
		t.Errorf("Expected error with nil private key")
	}

	_, _, err = engine.VerifyMessage([]byte("test"), nil)
	if err == nil {
		t.Errorf("Expected error with nil public key")
	}

	// Test with empty messages
	kemPub, kemPriv, _ := engine.GenerateKEMKeyPair()
	defer kemPriv.Zeroize()

	_, err = engine.EncryptMessage([]byte{}, kemPub)
	if err == nil {
		t.Errorf("Expected error with empty message")
	}

	_, err = engine.SignMessage([]byte{}, kemPriv)
	if err == nil {
		t.Errorf("Expected error with empty message")
	}
}

func TestKeyManager(t *testing.T) {
	config := &Config{
		MaxKeyAge:         1 * time.Second,
		KeyRotationPeriod: 500 * time.Millisecond,
	}

	km := NewKeyManager(config)
	defer km.Cleanup()

	// Create mock keys
	mockPubKey := &mockPublicKey{data: []byte("public")}
	mockPrivKey := &mockPrivateKey{data: []byte("private")}

	// Store key pair
	km.StoreKEMKeyPair("test-key", mockPubKey, mockPrivKey)

	// Retrieve key pair
	keyPair, exists := km.GetKEMKeyPair("test-key")
	if !exists {
		t.Errorf("Key pair should exist")
	}
	if keyPair == nil {
		t.Errorf("Key pair should not be nil")
	}

	// Wait for key to expire
	time.Sleep(1100 * time.Millisecond)

	// Try to retrieve expired key
	_, exists = km.GetKEMKeyPair("test-key")
	if exists {
		t.Errorf("Expired key should not exist")
	}
}

func BenchmarkPQCEngine_Encryption(b *testing.B) {
	config := &Config{
		KEMAlgorithm:  AlgorithmKyber768,
		SecurityLevel: SecurityLevel3,
		EnableMetrics: false,
	}

	engine, err := NewEngine(config)
	if err != nil {
		b.Fatalf("Failed to create PQC engine: %v", err)
	}
	defer engine.Close()

	kemPub, kemPriv, err := engine.GenerateKEMKeyPair()
	if err != nil {
		b.Fatalf("Failed to generate key pair: %v", err)
	}
	defer kemPriv.Zeroize()

	message := make([]byte, 1024) // 1KB message
	rand.Read(message)

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			encryptedData, err := engine.EncryptMessage(message, kemPub)
			if err != nil {
				b.Errorf("Encryption failed: %v", err)
			}

			_, err = engine.DecryptMessage(encryptedData, kemPriv)
			if err != nil {
				b.Errorf("Decryption failed: %v", err)
			}
		}
	})
}

func BenchmarkPQCEngine_Signing(b *testing.B) {
	config := &Config{
		SignatureAlgorithm: AlgorithmDilithium3,
		SecurityLevel:      SecurityLevel3,
		EnableMetrics:      false,
	}

	engine, err := NewEngine(config)
	if err != nil {
		b.Fatalf("Failed to create PQC engine: %v", err)
	}
	defer engine.Close()

	sigPub, sigPriv, err := engine.GenerateSignatureKeyPair()
	if err != nil {
		b.Fatalf("Failed to generate key pair: %v", err)
	}
	defer sigPriv.Zeroize()

	message := make([]byte, 1024) // 1KB message
	rand.Read(message)

	b.ResetTimer()
	b.RunParallel(func(pb *testing.PB) {
		for pb.Next() {
			signedData, err := engine.SignMessage(message, sigPriv)
			if err != nil {
				b.Errorf("Signing failed: %v", err)
			}

			_, valid, err := engine.VerifyMessage(signedData, sigPub)
			if err != nil {
				b.Errorf("Verification failed: %v", err)
			}
			if !valid {
				b.Errorf("Signature verification failed")
			}
		}
	})
}

// Mock implementations for testing

type mockPublicKey struct {
	data []byte
}

func (m *mockPublicKey) ToBytes() []byte {
	return m.data
}

func (m *mockPublicKey) FromBytes(data []byte) error {
	m.data = make([]byte, len(data))
	copy(m.data, data)
	return nil
}

func (m *mockPublicKey) Algorithm() Algorithm {
	return AlgorithmKyber512
}

type mockPrivateKey struct {
	data []byte
}

func (m *mockPrivateKey) ToBytes() []byte {
	return m.data
}

func (m *mockPrivateKey) FromBytes(data []byte) error {
	m.data = make([]byte, len(data))
	copy(m.data, data)
	return nil
}

func (m *mockPrivateKey) Zeroize() {
	for i := range m.data {
		m.data[i] = 0
	}
}

func (m *mockPrivateKey) Algorithm() Algorithm {
	return AlgorithmKyber512
}
