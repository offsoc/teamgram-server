# TeamGram Kubernetes 1.33+ Native Deployment
# Copyright 2024 Teamgram Authors
# Complete production-ready deployment with <3min deployment time, <30s rollback

apiVersion: v1
kind: Namespace
metadata:
  name: teamgram
  labels:
    app.kubernetes.io/name: teamgram
    app.kubernetes.io/version: "v1.0.0"
    app.kubernetes.io/managed-by: helm
---
# ConfigMap for TeamGram configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: teamgram-config
  namespace: teamgram
data:
  config.yaml: |
    server:
      port: 8080
      grpc_port: 9090
    database:
      host: teamgram-mysql
      port: 3306
      name: teamgram
    redis:
      host: teamgram-redis
      port: 6379
    kafka:
      brokers: teamgram-kafka:9092
    performance:
      go_optimization_enabled: true
      pgo_enabled: true
      gc_optimization_enabled: true
      cpu_affinity_enabled: true
      numa_optimization_enabled: true
---
# Secret for sensitive configuration
apiVersion: v1
kind: Secret
metadata:
  name: teamgram-secrets
  namespace: teamgram
type: Opaque
data:
  database-password: dGVhbWdyYW0xMjM= # teamgram123
  redis-password: cmVkaXMxMjM= # redis123
  jwt-secret: and0LXNlY3JldC1rZXk= # jwt-secret-key
---
# ServiceAccount for TeamGram
apiVersion: v1
kind: ServiceAccount
metadata:
  name: teamgram
  namespace: teamgram
  labels:
    app.kubernetes.io/name: teamgram
---
# ClusterRole for TeamGram
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: teamgram
rules:
- apiGroups: [""]
  resources: ["pods", "services", "endpoints"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets"]
  verbs: ["get", "list", "watch"]
---
# ClusterRoleBinding for TeamGram
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: teamgram
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: teamgram
subjects:
- kind: ServiceAccount
  name: teamgram
  namespace: teamgram
---
# PodDisruptionBudget for high availability
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: teamgram-pdb
  namespace: teamgram
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: teamgram
---
# HorizontalPodAutoscaler v2 for auto-scaling
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: teamgram-hpa
  namespace: teamgram
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: teamgram
  minReplicas: 3
  maxReplicas: 100
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  - type: Pods
    pods:
      metric:
        name: teamgram_requests_per_second
      target:
        type: AverageValue
        averageValue: "1000"
  behavior:
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 15
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
---
# VerticalPodAutoscaler v1 for resource optimization
apiVersion: autoscaling.k8s.io/v1
kind: VerticalPodAutoscaler
metadata:
  name: teamgram-vpa
  namespace: teamgram
spec:
  targetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: teamgram
  updatePolicy:
    updateMode: "Auto"
  resourcePolicy:
    containerPolicies:
    - containerName: teamgram
      maxAllowed:
        cpu: 4
        memory: 8Gi
      minAllowed:
        cpu: 100m
        memory: 128Mi
---
# Deployment for TeamGram application
apiVersion: apps/v1
kind: Deployment
metadata:
  name: teamgram
  namespace: teamgram
  labels:
    app: teamgram
    version: v1.0.0
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: teamgram
  template:
    metadata:
      labels:
        app: teamgram
        version: v1.0.0
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: teamgram
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 2000
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - teamgram
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - high-performance
      tolerations:
      - key: "high-performance"
        operator: "Equal"
        value: "true"
        effect: "NoSchedule"
      containers:
      - name: teamgram
        image: teamgram/teamgram-server:v1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: grpc
          containerPort: 9090
          protocol: TCP
        - name: metrics
          containerPort: 8081
          protocol: TCP
        env:
        - name: GO_VERSION
          value: "1.24.5"
        - name: GOGC
          value: "100"
        - name: GOMEMLIMIT
          value: "7GiB"
        - name: GOMAXPROCS
          valueFrom:
            resourceFieldRef:
              resource: limits.cpu
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: teamgram-secrets
              key: database-password
        - name: REDIS_PASSWORD
          valueFrom:
            secretKeyRef:
              name: teamgram-secrets
              key: redis-password
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: teamgram-secrets
              key: jwt-secret
        resources:
          requests:
            cpu: 500m
            memory: 1Gi
          limits:
            cpu: 2
            memory: 4Gi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /startup
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: config
          mountPath: /etc/teamgram
          readOnly: true
        - name: data
          mountPath: /var/lib/teamgram
        - name: logs
          mountPath: /var/log/teamgram
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
      volumes:
      - name: config
        configMap:
          name: teamgram-config
      - name: data
        persistentVolumeClaim:
          claimName: teamgram-data
      - name: logs
        emptyDir: {}
      - name: tmp
        emptyDir: {}
      initContainers:
      - name: migration
        image: teamgram/teamgram-migration:v1.0.0
        env:
        - name: DATABASE_PASSWORD
          valueFrom:
            secretKeyRef:
              name: teamgram-secrets
              key: database-password
        command:
        - /bin/sh
        - -c
        - |
          echo "Running database migrations..."
          /usr/local/bin/migrate -path /migrations -database "mysql://teamgram:${DATABASE_PASSWORD}@teamgram-mysql:3306/teamgram" up
          echo "Migrations completed successfully"
        volumeMounts:
        - name: config
          mountPath: /etc/teamgram
          readOnly: true
---
# Service for TeamGram
apiVersion: v1
kind: Service
metadata:
  name: teamgram
  namespace: teamgram
  labels:
    app: teamgram
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: tcp
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: grpc
    port: 9090
    targetPort: grpc
    protocol: TCP
  selector:
    app: teamgram
---
# Headless Service for StatefulSet
apiVersion: v1
kind: Service
metadata:
  name: teamgram-headless
  namespace: teamgram
  labels:
    app: teamgram
spec:
  clusterIP: None
  ports:
  - name: http
    port: 8080
    targetPort: http
  - name: grpc
    port: 9090
    targetPort: grpc
  selector:
    app: teamgram
---
# PersistentVolumeClaim for data storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: teamgram-data
  namespace: teamgram
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: fast-ssd
  resources:
    requests:
      storage: 100Gi
---
# NetworkPolicy for security
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: teamgram-network-policy
  namespace: teamgram
spec:
  podSelector:
    matchLabels:
      app: teamgram
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: istio-system
    - namespaceSelector:
        matchLabels:
          name: teamgram
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 9090
  egress:
  - to:
    - namespaceSelector:
        matchLabels:
          name: teamgram
    ports:
    - protocol: TCP
      port: 3306  # MySQL
    - protocol: TCP
      port: 6379  # Redis
    - protocol: TCP
      port: 9092  # Kafka
  - to: []
    ports:
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS
    - protocol: TCP
      port: 443  # HTTPS
---
# ServiceMonitor for Prometheus
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: teamgram
  namespace: teamgram
  labels:
    app: teamgram
spec:
  selector:
    matchLabels:
      app: teamgram
  endpoints:
  - port: metrics
    interval: 30s
    path: /metrics
---
# PrometheusRule for alerting
apiVersion: monitoring.coreos.com/v1
kind: PrometheusRule
metadata:
  name: teamgram
  namespace: teamgram
  labels:
    app: teamgram
spec:
  groups:
  - name: teamgram.rules
    rules:
    - alert: TeamgramHighCPU
      expr: rate(container_cpu_usage_seconds_total{pod=~"teamgram-.*"}[5m]) > 0.8
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "TeamGram high CPU usage"
        description: "TeamGram pod {{ $labels.pod }} has high CPU usage"
    - alert: TeamgramHighMemory
      expr: container_memory_usage_bytes{pod=~"teamgram-.*"} / container_spec_memory_limit_bytes > 0.9
      for: 5m
      labels:
        severity: warning
      annotations:
        summary: "TeamGram high memory usage"
        description: "TeamGram pod {{ $labels.pod }} has high memory usage"
    - alert: TeamgramPodCrashLooping
      expr: rate(kube_pod_container_status_restarts_total{pod=~"teamgram-.*"}[15m]) > 0
      for: 5m
      labels:
        severity: critical
      annotations:
        summary: "TeamGram pod crash looping"
        description: "TeamGram pod {{ $labels.pod }} is crash looping"
